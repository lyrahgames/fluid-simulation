{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"setM",
				"setMinimum"
			],
			[
				"re_",
				"reynold_dsb"
			],
			[
				"rey",
				"reynold"
			],
			[
				"set_re",
				"set_reynold_slot"
			],
			[
				"reyno",
				"reynold_dsb"
			],
			[
				"con",
				"connect"
			],
			[
				"mo",
				"mouseclick_cb"
			],
			[
				"add",
				"addWidget"
			],
			[
				"mous",
				"mouseclick_cb\t(main-w.h)"
			],
			[
				"bor",
				"border_l"
			],
			[
				"nse_gb",
				"nse_gb_layout"
			],
			[
				"vx",
				"vx_idx_persis"
			],
			[
				"vec",
				"vecf2"
			],
			[
				"colo",
				"color_rgbf"
			],
			[
				"_max",
				"_max_size_"
			],
			[
				"seg_idx",
				"seg_idx_cache"
			],
			[
				"seg",
				"seg_idx_cache"
			],
			[
				"bound",
				"bound0"
			],
			[
				"pix",
				"pix_stoi"
			],
			[
				"sq",
				"sq_inv_step"
			],
			[
				"poisson",
				"poisson_p_sor_it"
			],
			[
				"compute",
				"compute_v"
			],
			[
				"main",
				"main_w"
			],
			[
				"value",
				"valueChanged"
			],
			[
				"wave_da",
				"wave_damp_dsb"
			],
			[
				"wave",
				"wave_damp_dsb\t(main-w.h)"
			],
			[
				"do",
				"double"
			],
			[
				"wave_",
				"wave_c"
			],
			[
				"Vec",
				"VecField2f"
			],
			[
				"c",
				"count"
			],
			[
				"rand",
				"rand_pos_size"
			],
			[
				"init",
				"initRandPos"
			],
			[
				"ve",
				"vector"
			],
			[
				"rand_p",
				"rand_pos_size"
			],
			[
				"ran",
				"rand_pos"
			],
			[
				"Ra",
				"RAND_POINT_COUNT"
			],
			[
				"ra",
				"rand_num"
			],
			[
				"pri",
				"private"
			],
			[
				"ome",
				"omega2"
			],
			[
				"F_",
				"F_tmp3"
			],
			[
				"F",
				"F_tmp1"
			],
			[
				"inv",
				"inv_scale"
			],
			[
				"Re",
				"Re_inv"
			],
			[
				"Sc",
				"ScalarField2f"
			],
			[
				"S",
				"ScalarField2f"
			],
			[
				"sc",
				"scalar_field\t(render-w.h)"
			],
			[
				"end",
				"endif\t(render-w.h)"
			],
			[
				"off",
				"offset"
			],
			[
				"o",
				"offset"
			],
			[
				"vc",
				"vec2"
			],
			[
				"sca",
				"scalar-field"
			],
			[
				"pixe",
				"pixel_grid"
			],
			[
				"Sca",
				"ScalarField2f\t(scalar-field.h)"
			],
			[
				"max",
				"max_mag"
			],
			[
				"__",
				"__SCALAR_FIELD_H__"
			],
			[
				"Ve",
				"VecField2f"
			],
			[
				"vec2",
				"vec2u"
			],
			[
				"tm",
				"tmp_y2"
			],
			[
				"tmp",
				"tmp_x2"
			],
			[
				"tmp_y",
				"tmp_y1"
			],
			[
				"_",
				"_field"
			],
			[
				"gri",
				"grid_point"
			],
			[
				"grid",
				"grid_min"
			],
			[
				"pos",
				"pos_vec"
			],
			[
				"def",
				"def_grid"
			],
			[
				"com",
				"comp\t(vec.h)"
			],
			[
				"Grid",
				"Grid2"
			],
			[
				"max_",
				"max_val"
			],
			[
				"min",
				"min_val"
			],
			[
				"tem",
				"template\t(grid.h)"
			],
			[
				"lin",
				"lineTo"
			],
			[
				"size",
				"size_x"
			],
			[
				"pa",
				"path"
			],
			[
				"gi",
				"grid"
			],
			[
				"idx",
				"idx_y"
			],
			[
				"set",
				"setzero"
			],
			[
				"Gr",
				"Grid2"
			],
			[
				"te",
				"template\t(grid.h)"
			],
			[
				"Grd",
				"Grid2f\t(grid.h)"
			],
			[
				"mi",
				"min_x"
			],
			[
				"siz",
				"size_x"
			],
			[
				"co",
				"count_y"
			],
			[
				"cou",
				"count_y"
			],
			[
				"si",
				"size_y"
			],
			[
				"N_",
				"N_Y"
			],
			[
				"N",
				"N_Y"
			],
			[
				"sz",
				"size_x"
			],
			[
				"ot",
				"out"
			],
			[
				"bac",
				"back_shift"
			],
			[
				"bit",
				"bit_reverse"
			],
			[
				"tw",
				"twiddle_lut_power"
			],
			[
				"twi",
				"twiddle_lut_count"
			],
			[
				"eve",
				"even_out"
			],
			[
				"ui",
				"uint"
			],
			[
				"odd",
				"odd_in"
			],
			[
				"even",
				"even_in"
			],
			[
				"M_P",
				"M_PI"
			],
			[
				"struct",
				"struct\tstruct"
			],
			[
				"fft",
				"fft_data"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/gui/main-w.h",
			"settings":
			{
				"buffer_size": 3671,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/gui/main-w.cpp",
			"settings":
			{
				"buffer_size": 12942,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/cfs.cpp",
			"settings":
			{
				"buffer_size": 11665,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/cfs.h",
			"settings":
			{
				"buffer_size": 4240,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef __CFS_H__\n#define __CFS_H__\n\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\n#include <vec.h>\n#include <grid.h>\n#include <util.h>\n\n\n// cavity fluid simulation\nstruct CFS{\n\tusing sfield = std::vector<float>;\n\n\n\tenum AXIS{\n\t\tX = 0, Y = 1\n\t};\n\n\n\n\tpublic:\n\t\tCFS(const gridmap& in_grid_map0, const gridmap& in_grid_map1):\n\t\t_grid_map{in_grid_map0, in_grid_map1},\n\t\t_p(p_size(), 0.0f),\n\t\t_v{sfield(vx_size(), 0.0f), sfield(vy_size(), 0.0f)}{\n\n\n\n\t\t\t_reynold = 10.0f;\n\t\t\t_time = 0.0f;\n\t\t\t_it_step = 0;\n\t\t\t_time_step_safety = 0.5f;\n\t\t\t_force = vec2{};\n\t\t\t_cdq_weight = 0.5f;\n\t\t\t_sor_weight = 0.5f;\n\t\t\t_sor_eps = 0.001f;\n\t\t\t_sor_it_max = 100;\n\t\t\t_vx_max_mag = _inv_vx_max_mag = 1.0f;\n\t\t\t_vy_max_mag = _inv_vy_max_mag = 1.0f;\n\t\t\t\n\t\t\tinit_field();\n\t\t\tcompute_time_step_bound();\n\n\t\t\t// for (int i = 0; i < p_size(); i++){\n\t\t\t// \t_p[i] = sq(sin(10.0f * float(i)/float(p_size())));\n\t\t\t// }\n\n\t\t\t// for (uint i = 0; i < p_width(); i++){\n\t\t\t// \tfor (uint j = 0; j < p_height(); j++){\n\t\t\t// \t\tconst float x = _grid_map[0].cell_pos(i);\n\t\t\t// \t\tconst float y = _grid_map[1].cell_pos(j);\n\t\t\t// \t\t_p[p_memidx(i,j)] = sqrt(x) * sin(3*M_PI*x) * sin(M_PI*y);\n\t\t\t// \t}\n\t\t\t// }\n\n\t\t\t// for (int i = 0; i < vx_size(); i++){\n\t\t\t// \t_v[0][i] = float(i)/float(vx_size());\n\t\t\t// }\n\n\t\t\t// for (int i = 0; i < vy_size(); i++){\n\t\t\t// \tconst float tmp = float(i)/float(vy_size());\n\t\t\t// \t_v[1][i] = sqrt(tmp) * sin(3*M_PI*tmp) * sin(M_PI*tmp);\n\t\t\t// \t// sq(cos(10.0f /(float(i)/float(vy_size()))));\n\t\t\t// }\n\t\t}\n\n\n\t\tfloat reynold() const{return _reynold;}\n\t\tfloat inv_reynold() const{return _inv_reynold;}\n\t\tuint it_step() const{return _it_step;}\n\t\tfloat time() const{return _time;}\n\t\tfloat time_step() const{return _time_step;}\n\t\tfloat inv_time_step() const{return _inv_time_step;}\n\t\tfloat time_step_safety() const{return _time_step_safety;}\n\t\tfloat time_step_bound() const{return _time_step_bound;}\n\t\tconst gridmap* grid_map() const{return _grid_map;}\n\t\t// vec2 inv_v_max_mag() const{return _inv_v_max_mag;}\n\t\t// const sfield& p() const{return _p;}\n\t\tfloat cdq_weight() const{return _cdq_weight;}\n\t\tfloat sor_weight() const{return _sor_weight;}\n\t\tfloat sor_eps() const{return _sor_eps;}\n\t\tfloat sor_it_max() const{return _sor_it_max;}\n\t\tvec2 force() const{return _force;}\n\n\n\n\t\tfloat p(float in_x, float in_y) const{\n\t\t\tif (pos_out_p_bound(in_x, in_y))\n\t\t\t\treturn 0.0f;\n\n\t\t\tconst float x = _grid_map[0].cell_idx(in_x);\n\t\t\tconst float y = _grid_map[1].cell_idx(in_y);\n\t\t\tconst float fidx_x = floor(x);\n\t\t\tconst float fidx_y = floor(y);\n\t\t\tconst uint idx_x = static_cast<uint>(fidx_x);\n\t\t\tconst uint idx_y = static_cast<uint>(fidx_y);\n\t\t\tconst float w_x = x - fidx_x;\n\t\t\tconst float w_y = y - fidx_y;\n\t\t\tconst uint idx1 = p_memidx(idx_x, idx_y);\n\t\t\tconst uint idx2 = p_memidx(idx_x, idx_y+1);\n\n\t\t\treturn bilin_interp(_p[idx1], _p[idx1+1], _p[idx2], _p[idx2+1], w_x, w_y);\n\t\t}\n\n\t\tfloat p_save(float in_x, float in_y) const{\n\t\t\tconst float x = _grid_map[0].cell_idx(in_x);\n\t\t\tconst float y = _grid_map[1].cell_idx(in_y);\n\t\t\tconst float fidx_x = floor(x);\n\t\t\tconst float fidx_y = floor(y);\n\t\t\tconst uint idx_x = static_cast<uint>(fidx_x);\n\t\t\tconst uint idx_y = static_cast<uint>(fidx_y);\n\t\t\tconst float w_x = x - fidx_x;\n\t\t\tconst float w_y = y - fidx_y;\n\t\t\tconst uint idx1 = p_memidx(idx_x, idx_y);\n\t\t\tconst uint idx2 = p_memidx(idx_x, idx_y+1);\n\n\t\t\treturn bilin_interp(_p[idx1], _p[idx1+1], _p[idx2], _p[idx2+1], w_x, w_y);\n\t\t}\n\n\n\t\tfloat vx(float in_x, float in_y) const{\n\t\t\tif (pos_out_vx_bound(in_x, in_y))\n\t\t\t\treturn 0.0f;\n\n\t\t\tconst float x = _grid_map[0].node_idx(in_x) - 1;\n\t\t\tconst float y = _grid_map[1].cell_idx(in_y);\n\t\t\tconst float fidx_x = floor(x);\n\t\t\tconst float fidx_y = floor(y);\n\t\t\tconst uint idx_x = static_cast<uint>(fidx_x);\n\t\t\tconst uint idx_y = static_cast<uint>(fidx_y);\n\t\t\tconst float w_x = x - fidx_x;\n\t\t\tconst float w_y = y - fidx_y;\n\t\t\tconst uint idx1 = vx_memidx(idx_x, idx_y);\n\t\t\tconst uint idx2 = vx_memidx(idx_x, idx_y+1);\n\n\t\t\treturn bilin_interp(_v[0][idx1], _v[0][idx1+1], _v[0][idx2], _v[0][idx2+1], w_x, w_y);\n\t\t}\n\n\t\tfloat vx_tmp(float in_x, float in_y) const{\n\t\t\tif (pos_out_vx_bound(in_x, in_y))\n\t\t\t\treturn 0.0f;\n\n\t\t\tconst float x = _grid_map[0].node_idx(in_x) - 1;\n\t\t\tconst float y = _grid_map[1].cell_idx(in_y);\n\t\t\tconst float fidx_x = floor(x);\n\t\t\tconst float fidx_y = floor(y);\n\t\t\tconst uint idx_x = static_cast<uint>(fidx_x);\n\t\t\tconst uint idx_y = static_cast<uint>(fidx_y);\n\t\t\tconst float w_x = x - fidx_x;\n\t\t\tconst float w_y = y - fidx_y;\n\t\t\tconst uint idx1 = vx_memidx(idx_x, idx_y);\n\t\t\tconst uint idx2 = vx_memidx(idx_x, idx_y+1);\n\n\t\t\treturn bilin_interp(_tmp[0][idx1], _tmp[0][idx1+1], _tmp[0][idx2], _tmp[0][idx2+1], w_x, w_y);\n\t\t}\n\n\t\tfloat vy(float in_x, float in_y) const{\n\t\t\tif (pos_out_vy_bound(in_x, in_y))\n\t\t\t\treturn 0.0f;\n\n\t\t\tconst float x = _grid_map[0].cell_idx(in_x);\n\t\t\tconst float y = _grid_map[1].node_idx(in_y) - 1;\n\t\t\tconst float fidx_x = floor(x);\n\t\t\tconst float fidx_y = floor(y);\n\t\t\tconst uint idx_x = static_cast<uint>(fidx_x);\n\t\t\tconst uint idx_y = static_cast<uint>(fidx_y);\n\t\t\tconst float w_x = x - fidx_x;\n\t\t\tconst float w_y = y - fidx_y;\n\t\t\tconst uint idx1 = vy_memidx(idx_x, idx_y);\n\t\t\tconst uint idx2 = vy_memidx(idx_x, idx_y+1);\n\n\t\t\treturn bilin_interp(_v[1][idx1], _v[1][idx1+1], _v[1][idx2], _v[1][idx2+1], w_x, w_y);\n\t\t}\n\n\n\n\t\tvoid compute_time_step(){\n\t\t\tconst float tmp1 = _grid_map[0].step() * _inv_vx_max_mag;\n\t\t\tconst float tmp2 = _grid_map[1].step() * _inv_vy_max_mag;\n\n\t\t\t_time_step = std::min(tmp1, tmp2);\n\t\t\t_time_step = std::min(_time_step_bound, time_step_safety() * _time_step);\n\t\t\t_inv_time_step = 1.0f / _time_step;\n\t\t}\n\n\t\tvoid set_time_step(float in_time_step){\n\t\t\tif (in_time_step <= 0.0f)\n\t\t\t\treturn;\n\n\t\t\t_time_step = in_time_step;\n\t\t\t_inv_time_step = 1.0f / _time_step;\n\t\t}\n\n\t\tvoid compute_time_step_bound(){\n\t\t\tconst float tmp = (sq(_grid_map[0].inv_step())) + (sq(_grid_map[1].inv_step()));\n\t\t\t_time_step_bound = 0.5f * time_step_safety() * reynold() / tmp;\n\t\t}\n\n\n\t\tvoid compute_time_it();\n\t\tvoid compute_equ();\n\t\tvoid compute_poisson();\n\t\tvoid compute_v();\n\t\tvoid set_v_bound();\n\n\t\tvoid set_grid_map(const gridmap& in_grid_map0, const gridmap& in_grid_map1){\n\t\t\t_grid_map[0] = in_grid_map0;\n\t\t\t_grid_map[1] = in_grid_map1;\n\n\t\t\tinit_field();\n\t\t}\n\n\n\tprivate:\n\t\t// underlying grid for pressure and velocity\n\t\tgridmap _grid_map[2];\n\t\t// pressure\n\t\tsfield _p;\n\t\t// velocity (structure of arrays)\n\t\tsfield _v[2];\n\n\t\tsfield _tmp[3];\n\n\n\t\t// parameters\n\t\t// reynold number\n\t\tfloat _reynold;\n\t\tfloat _time;\n\t\tuint _it_step;\n\t\t// \n\t\tfloat _time_step;\n\t\t// time step safety factor\n\t\tfloat _time_step_safety;\n\t\t// force/acceleration\n\t\tvec2 _force;\n\t\t// weight for donor-cell discretization\n\t\tfloat _donor_cell_weight;\n\t\t// weight for central difference quotient\n\t\tfloat _cdq_weight;\n\n\t\tfloat _sor_weight;\n\t\tfloat _sor_eps;\n\t\tfloat _sor_it_max;\n\n\n\t\t// temporary variables\n\t\t// maximum magnitude of velocity field\n\t\tfloat _vx_max_mag, _vy_max_mag, _inv_vx_max_mag, _inv_vy_max_mag;\n\t\t// inverse reynold number\n\t\tfloat _inv_reynold;\n\t\t// inverse time step\n\t\tfloat _inv_time_step;\n\t\t// upper boundary for adaptive time stepsize control\n\t\tfloat _time_step_bound;\n\n\n\n\t// private:\n\tpublic:\n\t\tuint p_size() const{return p_width()*p_height();}\n\t\tuint p_width() const{return _grid_map[0].cell_count();}\n\t\tuint p_height() const{return _grid_map[1].cell_count();}\n\t\tuint vx_size() const{return vx_width()*vx_height();}\n\t\tuint vx_width() const{return _grid_map[0].cell_count() - 1;}\n\t\tuint vx_height() const{return _grid_map[1].cell_count();}\n\t\tuint vy_size() const{return vy_width()*vy_height();}\n\t\tuint vy_width() const{return _grid_map[0].cell_count();}\n\t\tuint vy_height() const{return _grid_map[1].cell_count() - 1;}\n\n\t\tuint p_memidx(uint idx_x, uint idx_y) const{\n\t\t\treturn quad_rm_memidx(p_width(), idx_y, idx_x);\n\t\t}\n\t\tuint p_memidx_u(uint idx) const{\n\t\t\treturn idx + p_width();\n\t\t}\n\t\tuint p_memidx_d(uint idx) const{\n\t\t\treturn idx - p_width();\n\t\t}\n\t\tuint p_memidx_r(uint idx) const{\n\t\t\treturn idx + 1;\n\t\t}\n\t\tuint p_memidx_l(uint idx) const{\n\t\t\treturn idx - 1;\n\t\t}\n\n\t\tuint vx_memidx(uint idx_x, uint idx_y) const{\n\t\t\treturn quad_rm_memidx(vx_width(), idx_y, idx_x);\n\t\t}\n\t\tuint vx_memidx_u(uint idx) const{\n\t\t\treturn idx + vx_width();\n\t\t}\n\t\tuint vx_memidx_d(uint idx) const{\n\t\t\treturn idx - vx_width();\n\t\t}\n\t\tuint vx_memidx_r(uint idx) const{\n\t\t\treturn idx + 1;\n\t\t}\n\t\tuint vx_memidx_l(uint idx) const{\n\t\t\treturn idx - 1;\n\t\t}\n\n\t\tuint vy_memidx(uint idx_x, uint idx_y) const{\n\t\t\treturn quad_rm_memidx(vy_height(), idx_y, idx_x);\n\t\t}\n\t\tuint vy_memidx_u(uint idx) const{\n\t\t\treturn idx + vy_width();\n\t\t}\n\t\tuint vy_memidx_d(uint idx) const{\n\t\t\treturn idx - vy_width();\n\t\t}\n\t\tuint vy_memidx_r(uint idx) const{\n\t\t\treturn idx + 1;\n\t\t}\n\t\tuint vy_memidx_l(uint idx) const{\n\t\t\treturn idx - 1;\n\t\t}\n\n\t\tvoid init_field(){\n\t\t\t_p.resize(p_size(), 0.0f);\n\t\t\t_tmp[2].resize(p_size(), 0.0f);\n\t\t\t_v[0].resize(vx_size(), 0.0f);\n\t\t\t_tmp[0].resize(vx_size(), 0.0f);\n\t\t\t_v[1].resize(vy_size(), 0.0f);\n\t\t\t_tmp[1].resize(vy_size(), 0.0f);\n\t\t}\n\n\t\tbool pos_out_bound_strip(float in_x, float in_y) const{\n\t\t\treturn (in_x < _grid_map[0].min() || in_x > _grid_map[0].max() || in_y < _grid_map[1].min() || in_y > _grid_map[1].max());\n\t\t}\n\n\t\tbool pos_out_bound(float in_x, float in_y) const{\n\t\t\treturn (in_x <= _grid_map[0].node_pos(1) || in_x >= _grid_map[0].node_pos(_grid_map[0].size()-1) || in_y <= _grid_map[1].node_pos(1) || in_y >= _grid_map[1].cell_pos(_grid_map[1].size()-1));\n\t\t}\n\n\t\tbool pos_out_p_bound(float in_x, float in_y) const{\n\t\t\treturn (in_x <= _grid_map[0].cell_pos(0) || in_x >= _grid_map[0].cell_pos(p_width()-1) || in_y <= _grid_map[1].cell_pos(0) || in_y >= _grid_map[1].cell_pos(p_height()-1));\n\t\t}\n\n\t\tbool pos_out_vx_bound(float in_x, float in_y) const{\n\t\t\treturn (in_x <= _grid_map[0].node_pos(1) || in_x >= _grid_map[0].node_pos(vx_width()) || in_y <= _grid_map[1].cell_pos(0) || in_y >= _grid_map[1].cell_pos(vx_height()-1));\n\t\t}\n\n\t\tbool pos_out_vy_bound(float in_x, float in_y) const{\n\t\t\treturn (in_x <= _grid_map[0].cell_pos(0) || in_x >= _grid_map[0].cell_pos(vy_width()-1) || in_y <= _grid_map[1].node_pos(1) || in_y >= _grid_map[1].node_pos(vy_height()));\n\t\t}\t\t\n};\n\n\n#endif // __CFS_H__",
			"file": "src/cfs.h.backup",
			"file_size": 10140,
			"file_write_time": 131237735934125176,
			"settings":
			{
				"buffer_size": 10140,
				"line_ending": "Unix"
			}
		},
		{
			"file": "todo",
			"settings":
			{
				"buffer_size": 278,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "TARGET  = static\n\nTEMPLATE = app\nCONFIG += qt thread warn_on release \nQT = core gui\n\ngreaterThan(QT_MAJOR_VERSION, 4) {\n    QT += widgets\n}\n\nDEFINES += \nQMAKE_CXXFLAGS  += -O2 -fPIC -restrict -fno-fnalias -fno-rtti -fno-exceptions -static -std=c++11\nQMAKE_LFLAGS    +=\n\nINCLUDEPATH += \n\nLIBS +=\n\nHEADERS = \\\n\t../../src/render-w.h \\\n\t../../src/vec.h \\\n\t../../src/grid.h \\\n\t../../src/vec-field.h \\\n\t../../src/scalar-field.h \\\n\t../../src/nsg.h \\\n\t../../src/utils.h\n\nSOURCES = ../../src/main.cpp\n\n\nunix:OBJECTS_DIR          = obj\nunix:MOC_DIR              = moc\n\nunix:QMAKE_POST_LINK=strip $(TARGET)\n",
			"file": "pro-files/linux/config-static.pro",
			"file_size": 596,
			"file_write_time": 131233438955638278,
			"settings":
			{
				"buffer_size": 596,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/util.h",
			"settings":
			{
				"buffer_size": 867,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 2293,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nEasyClangComplete\n-----------------\n\n  ################################\n  ## EasyClangComplete v. 3.1.0 ##\n  ################################\n  \n  # New functionality #\n  - Use `Makefile.cmake` file to detect if cmake needs to be rerun.\n  - Add quick command to clean cmake build directory for current view:\n      + Name of command: `EasyClangComplete: Clean current CMake cache`\n  - Add support for flags passing to cmake:\n      + A new subsetting `\"flags\"` under cmake entry in `\"flags_sources\"`.\n      + See default settings for info.\n  \n  # Bug fixes #\n  - fix `$project_name` variable in settings.\n  - completion triggers settings are much better now.\n  - fix indentation for example project-specific settings.\n\n  ################################\n  ## EasyClangComplete v. 3.0.4 ##\n  ################################\n  \n  # Bug fixes #\n  - Fix issue with relative paths in compilation databases. Issue #167\n\n  ################################\n  ## EasyClangComplete v. 3.0.3 ##\n  ################################\n  Minor regression fixes.\n  \n  #############\n  # Bug fixes #\n  #############\n  - Fix regression in completion of class names on `::`, issue 164\n\n\nEasyClangComplete\n-----------------\n\n  ################################\n  ## EasyClangComplete v. 3.1.1 ##\n  ################################\n  \n  # Bug fixes #\n  - fix wrong completion representation for variadic templates when\n    `use_libclang` is `false`.\n\n\nLaTeXTools\n----------\n\n  LaTeXTools Plugin version 3.12.14 (2016-01-10) changelog:\n  \n  Bugfixes:\n  - Fixed a bug, which disabled some builders and debug information (#1004)\n  - Improved math preview inside displaymath environment (#996)\n\n  LaTeXTools Plugin version 3.12.12 (2016-01-06) changelog:\n  \n  Bugfixes:\n  - Fix forward search in Okular 1.0 (#989)\n  - Fix an issue that caused SumatraPDF to crash (#937)\n  - Fix an issue that broke latexmk on windows (#861)\n  - Improve clarity of equation previews (#982)\n  - More intelligent handling of window visible when using the command viewer on Windows (#986)\n",
			"settings":
			{
				"buffer_size": 2089,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "src/xmath/intvl.h",
			"settings":
			{
				"buffer_size": 280,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pro-files/linux/config.pro",
			"settings":
			{
				"buffer_size": 516,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/xmath/vec.h",
			"settings":
			{
				"buffer_size": 4857,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/colmap.h",
			"settings":
			{
				"buffer_size": 2473,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef __LINMAP_H__\n#define __LINMAP_H__\n\n#include <xmath/intvl.h>\n\n\nnamespace xmath{\n\n\ntemplate <class T>\nstruct intvl{\n\tunion{\n\t\tstruct{T min, max;};\n\t\tstruct{T inf, sup;};\n\t};\n};\n\nusing intvlf = intvl<float>;\n\n\ntemplate <class T>\ninline constexpr T len(const intvl<T>& i){\n\treturn i.max - i.min;\n}\n\n\n\ntemplate <class T>\nstruct linmap{\n\tusing type = T;\n\n\n\tstatic constexpr T map(const intvl<T>& domain, const intvl<T>& range, T input){\n\t\treturn (range.min * (domain.max - input) + range.max * (input - domain.min)) / (domain.max - domain.min);\n\t}\n\n\n\tpublic:\n\t\tconstexpr linmap(const intvl<T>& domain = {T{0}, T{1}}, const intvl<T>& range = {T{0}, T{1}}):\n\t\td(domain), r(range),\n\t\tu{r.max/len(d)}, v{r.min/len(d)},\n\t\ts{len(r)/len(d)}, // should be numerical more stable than (v-u)\n\t\ti{r.min - s*d.min} // maybe use: (d.max*r.min - d.min*r.max) / len(d)\n\t\t{} // compiler should save the inverse of len(d) in a temporary variable\n\n\n\t\tconstexpr T operator()(T input) const{return v * (d.max - input) + u * (input - d.min);}\n\n\t\tconstexpr intvl<T> domain() const{return d;}\n\t\tconstexpr intvl<T> range() const{return r;}\n\t\tconstexpr T slope() const{return s;}\n\t\tconstexpr T intercept() const{return i;}\n\t\tconstexpr T coeff_min() const{return v;}\n\t\tconstexpr T coeff_max() const{return u;}\n\n\n\tprivate:\n\t\tintvl<T> d; // domain\n\t\tintvl<T> r; // range\n\t\tT s; // slope\n\t\tT i; // intercept\n\t\tT u, v; // coefficients for fast interpolation\n};\n\nusing linmapf = linmap<float>;\n\n\ntemplate <class T>\ninline constexpr linmap<T> inv(const linmap<T>& lm){return linmap<T>(lm.range(), lm.domain());}\n\n\n} // xmath\n\n\n#endif // __LINMAP_H__",
			"file": "src/linmap.h",
			"file_size": 1618,
			"file_write_time": 131237850944330699,
			"settings":
			{
				"buffer_size": 1618,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/main.cpp",
			"settings":
			{
				"buffer_size": 1765,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/vec.h",
			"settings":
			{
				"buffer_size": 5041,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/scalar-field.h",
			"settings":
			{
				"buffer_size": 2548,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"qui",
				"Git: Quick Add"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"quic",
				"Git: Quick Add"
			],
			[
				"ssc++",
				"Set Syntax: C++"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"clse",
				"Project: Close"
			],
			[
				"close",
				"Project: Close"
			],
			[
				"langua",
				"Dictionaries: Set Language"
			],
			[
				"save",
				"Project: Save As"
			],
			[
				"add",
				"Project: Add Folder"
			],
			[
				"tmpf",
				"LaTexTools: Delete temporary files"
			],
			[
				"tmpfi",
				"LaTexTools: Delete temporary files"
			],
			[
				"tmpfil",
				"LaTexTools: Delete temporary files"
			],
			[
				"clo",
				"Project: Close"
			],
			[
				"kebinf",
				"Preferences: Key Bindings - Default"
			],
			[
				"tab",
				"View: Toggle Tabs"
			],
			[
				"tabs",
				"View: Toggle Tabs"
			],
			[
				"statur",
				"View: Toggle Status Bar"
			],
			[
				"mini",
				"View: Toggle Minimap"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"clos",
				"Project: Close"
			],
			[
				"brw",
				"Preferences: Browse Packages"
			],
			[
				"settings",
				"Preferences: Settings - Default"
			],
			[
				"add f",
				"Project: Add Folder"
			],
			[
				"lis",
				"Package Control: List Packages"
			]
		],
		"width": 601.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/mens/pro/fluid-sim",
		"/home/mens/pro/fluid-sim/pro-files",
		"/home/mens/pro/fluid-sim/pro-files/linux",
		"/home/mens/pro/fluid-sim/src",
		"/home/mens/pro/fluid-sim/src/gui",
		"/home/mens/pro/fluid-sim/src/io"
	],
	"file_history":
	[
		"/home/mens/pro/fluid-sim/tmp-src/utils.h",
		"/home/mens/pro/fluid-sim/tmp-src/nsg.h",
		"/home/mens/pro/fluid-sim/tmp-src/main.cpp",
		"/home/mens/pro/fluid-sim/src/field.h",
		"/home/mens/pro/fluid-sim/tmp-src/grid.h",
		"/home/mens/pro/fluid-sim/tmp-src/render-w.h",
		"/home/mens/pro/fluid-sim/src/xmath/linmap.h",
		"/home/mens/pro/fluid-sim/src/io/term-out.h",
		"/home/mens/pro/fluid-sim/src/xmath/op.cpp",
		"/home/mens/pro/fluid-sim/src/xmath/op.h",
		"/home/mens/pro/fluid-sim/src/cfs.cpp",
		"/home/mens/pro/fluid-sim/pro-files/linux/config.pro",
		"/home/mens/pro/fluid-sim/tmp-src/vec-field.h",
		"/home/mens/pro/fluid-sim/src/util.h",
		"/home/mens/pro/fluid-sim/tmp-src/scalar-field.h",
		"/home/mens/pro/fluid-sim/src/colmap.h",
		"/home/mens/pro/fluid-sim/src/gui/main-w.cpp",
		"/home/mens/pro/fluid-sim/src/cfs.h",
		"/home/mens/pro/fluid-sim/src/xmath/intvl.h",
		"/home/mens/pro/fluid-sim/tmp-src/vec.h",
		"/home/mens/pro/fluid-sim/src/xmath/vec.h",
		"/home/mens/pro/fluid-sim/src/gui/main-w.h",
		"/home/mens/pro/fluid-sim/src/vec.h",
		"/home/lyrahgames/pro/qt-render-kit/src/gui/main-w.cpp",
		"/home/lyrahgames/pro/fluid-sim/src/grid.h",
		"/home/lyrahgames/pro/fluid-sim/src/main-w.cpp",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.cpp",
		"/home/lyrahgames/pro/fluid-sim/src/main-w.h",
		"/home/lyrahgames/pro/fluid-sim/src/vec.h",
		"/home/lyrahgames/pro/fluid-sim/src/linmap.h",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.h.backup",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.h",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.backup",
		"/home/lyrahgames/pro/fluid-sim/src/field.h",
		"/home/lyrahgames/.bashrc",
		"/home/lyrahgames/pro/fluid-sim/src/render-w.h",
		"/home/lyrahgames/bashrc",
		"/home/lyrahgames/pro/qt-render-kit/src/gui/main-w.h",
		"/home/lyrahgames/pro/fluid-sim/pro-files/linux/config-periodic.pro",
		"/home/mens/.bashrc",
		"/home/mens/.bash",
		"/home/lyrahgames/pro/fluid-sim/src/vec-field.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/nsg-code.sublime-project",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/utils.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/src/scalar-field.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/src/field.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/render-w.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Proseminar Numerische Mathematik/presentation/doc.tex",
		"/tmp/mozilla_lyrahgames0/bow.tex",
		"/tmp/mozilla_lyrahgames0/game0.tex",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/hilbert.tex",
		"/home/lyrahgames/.config/sublime-text-2/Packages/User/LaTeXTools.sublime-settings",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main.cpp",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/II/317 - Elektrischer Schwingkreis/erzw-schw.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/II/406 - Gitter und Prismenspektrometer/dispersion.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/III/412 - Spezifische Drehung von Zucker/d-phi.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/III/120 - Gekoppelte Schwingungen/frequenzen.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/III/120 - Gekoppelte Schwingungen/frequenzen.gnuplot-data",
		"/home/lyrahgames/cloud/Dropbox/tools/sublime-text/sublime-text-2.0.2/User/LaTeX/snippets/stdinit.sublime-snippet",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main (lyrahgames-lap's conflicted copy 2015-12-09).log",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main (lyrahgames-lap's conflicted copy 2015-12-09).aux",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/stdinit.tex",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main.tex",
		"/home/lyrahgames/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/lyrahgames/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Höhere Analysis/I/Übungen/Übung 01/SoSe2015_HABlatt1.tex",
		"/home/lyrahgames/cloud/Dropbox/pro/qt-project/histoW-v3/src/histo-w.h",
		"/home/lyrahgames/pro/latex-stdinit/sublime-text-snippets/subsection_s.sublime-snippet",
		"/home/lyrahgames/pro/latex-stdinit/table.csv",
		"/home/lyrahgames/pro/latex-stdinit/sublime-text-snippets/stdinit.sublime-snippet",
		"/home/lyrahgames/pro/latex-stdinit/test.py",
		"/home/lyrahgames/pro/latex-stdinit/main.cu",
		"/home/lyrahgames/pro/latex-stdinit/main.cpp",
		"/home/lyrahgames/pro/latex-stdinit/sublime-text-snippets/math/qed01.sublime-snippet",
		"/home/lyrahgames/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/lyrahgames/cloud/Dropbox/pro/qt-project/histoW-v3/src/main.cpp"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"reynold",
			"set_wave_dt_slot",
			"sor_it_max",
			"0",
			"cfs",
			"vy_tmp",
			"vy",
			"gen_rand_pos_pb",
			"rand_pos_size_sb",
			"rand_pos",
			"_rand_pos_size_max_",
			"rand_pos",
			"constexpr",
			"rhs",
			"cfs",
			"vx",
			"wave_damp_dsb",
			"v",
			"vec2",
			"_cfs",
			"in_cfs",
			"_cfs",
			"v",
			"input",
			"noexcept",
			"inline",
			"input",
			"y",
			"x",
			"uint",
			"vec_mu",
			"constexpr",
			"uint",
			"inline",
			"length",
			"T",
			"_field",
			"_v",
			"grid_sb",
			"rand",
			"vx",
			"pos.x",
			"tmp",
			"RHS",
			"vz_",
			"vx_",
			"vy_",
			"[2]",
			"[0]",
			"[1]",
			"vx_",
			"0]",
			"[0]",
			"vx",
			"painter",
			"render_w",
			"mouse",
			"0",
			"_p",
			"main_gp",
			"main_w",
			"){",
			"_cfs",
			"__RENDER_W_H__",
			"render",
			"parent",
			"()));",
			"float",
			"height",
			"width",
			"size",
			"constexpr",
			"x",
			"tmp_idx",
			"size",
			"cfs",
			"_grid",
			"grid_map",
			"cidx",
			"refr",
			"fps",
			"unsigned int",
			"_time_safe",
			"gr",
			"grid",
			"__VEC_H__",
			"__VEC_H_",
			"vec",
			"cdiv",
			"5",
			"6",
			"9",
			"7",
			"9",
			"6",
			"7",
			"6",
			"7",
			"6",
			"5",
			"7",
			"6",
			"5",
			"9",
			"len",
			"rand_pos_size",
			"7",
			"6",
			"9",
			"5",
			"v",
			"7",
			"5",
			"7",
			"8",
			"7",
			"5",
			"7",
			"5",
			"60",
			"7",
			"6",
			"10",
			"grid",
			"i",
			"F_tmp1",
			"max_mag",
			"VecField2"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\\t"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/gui/main-w.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3671,
						"regions":
						{
						},
						"selection":
						[
							[
								2479,
								2479
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2540,
										2541
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1766,
										1767
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1569.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/gui/main-w.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12942,
						"regions":
						{
						},
						"selection":
						[
							[
								12336,
								12336
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										12336,
										12337
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										12334,
										12335
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6099.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/cfs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11665,
						"regions":
						{
						},
						"selection":
						[
							[
								3173,
								3173
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3209,
										3210
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3094,
										3095
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/cfs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4240,
						"regions":
						{
						},
						"selection":
						[
							[
								4009,
								4009
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4216,
										4217
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										67,
										68
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 450.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/cfs.h.backup",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10140,
						"regions":
						{
						},
						"selection":
						[
							[
								335,
								335
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 52.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "todo",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 278,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_scheme": "Packages/PlainTasks/tasks-monokai.hidden-tmTheme",
							"syntax": "Packages/PlainTasks/PlainTasks.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pro-files/linux/config-static.pro",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 596,
						"regions":
						{
						},
						"selection":
						[
							[
								16,
								16
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/QMakeProject/QMakeProject.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/util.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 867,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										847,
										853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2293,
						"regions":
						{
						},
						"selection":
						[
							[
								1187,
								1187
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2292,
										2293
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										129,
										130
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2293,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2089,
						"regions":
						{
						},
						"selection":
						[
							[
								2089,
								2089
							]
						],
						"settings":
						{
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"default_dir": "/home/mens/pro/fluid-sim",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/xmath/intvl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 280,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "pro-files/linux/config.pro",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 516,
						"regions":
						{
						},
						"selection":
						[
							[
								169,
								169
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"history_list_is_closing": true,
							"rulers":
							[
							],
							"syntax": "Packages/QMakeProject/QMakeProject.tmLanguage",
							"tab_size": 4,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "todo",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 278,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/PlainTasks/tasks-monokai.hidden-tmTheme",
							"syntax": "Packages/PlainTasks/PlainTasks.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/xmath/vec.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4857,
						"regions":
						{
						},
						"selection":
						[
							[
								1724,
								1724
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3127,
										3128
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3006,
										3007
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 842.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/colmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2473,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/linmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1618,
						"regions":
						{
						},
						"selection":
						[
							[
								121,
								121
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										180,
										181
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										120,
										121
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 173.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "tmp-src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1765,
						"regions":
						{
						},
						"selection":
						[
							[
								813,
								813
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "tmp-src/vec.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5041,
						"regions":
						{
						},
						"selection":
						[
							[
								3000,
								3000
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 780.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "tmp-src/scalar-field.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2548,
						"regions":
						{
						},
						"selection":
						[
							[
								998,
								998
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-commit":
	{
		"height": 98.0
	},
	"pinned_build_system": "",
	"project": "fluid-sim.sublime-project",
	"replace":
	{
		"height": 38.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main",
				"src/gui/main-w.cpp"
			],
			[
				"cfsh",
				"src/cfs.h"
			],
			[
				"cfs",
				"src/cfs.h"
			],
			[
				"mainw",
				"src/gui/main-w.h"
			],
			[
				"con",
				"pro-files/linux/config.pro"
			],
			[
				"co",
				"src/colmap.h"
			],
			[
				"cf",
				"src/cfs.cpp"
			],
			[
				"mai",
				"src/gui/main-w.cpp"
			],
			[
				"",
				"src/cfs.cpp"
			],
			[
				"util",
				"src/util.h"
			],
			[
				"conf",
				"pro-files/linux/config.pro"
			],
			[
				"op",
				"src/xmath/op.h"
			],
			[
				"vec",
				"src/xmath/vec.h"
			],
			[
				"uti",
				"src/util.h"
			],
			[
				"col",
				"src/colmap.h"
			],
			[
				"mainc",
				"src/main.cpp"
			],
			[
				"o",
				"src/xmath/op.cpp"
			],
			[
				"u",
				"src/util.h"
			],
			[
				"ve",
				"src/xmath/vec.h"
			],
			[
				"vc",
				"tmp-src/vec.h"
			],
			[
				"in",
				"src/xmath/intvl.h"
			],
			[
				"lin",
				"src/xmath/linmap.h"
			],
			[
				"ter",
				"src/io/term-out.h"
			],
			[
				"term",
				"src/io/term-out.h"
			],
			[
				"intvl",
				"src/xmath/intvl.h"
			],
			[
				"li",
				"src/xmath/linmap.h"
			],
			[
				"fiel",
				"src/field.h"
			],
			[
				"rend",
				"tmp-src/render-w.h"
			],
			[
				"gri",
				"src/grid.h"
			],
			[
				"field",
				"src/field.h"
			],
			[
				"sca",
				"tmp-src/scalar-field.h"
			],
			[
				"l",
				"src/linmap.h"
			],
			[
				"fie",
				"src/field.h"
			],
			[
				"grid",
				"tmp-src/grid.h"
			],
			[
				"gr",
				"src/grid.h"
			],
			[
				"sc",
				"tmp-src/scalar-field.h"
			],
			[
				"mainwc",
				"src/main-w.cpp"
			],
			[
				"ns",
				"tmp-src/nsg.h"
			],
			[
				"nsg",
				"tmp-src/nsg.h"
			],
			[
				"mainwh",
				"src/main-w.h"
			],
			[
				"man",
				"src/main-w.cpp"
			],
			[
				"to",
				"todo"
			],
			[
				"tod",
				"todo"
			],
			[
				"rened",
				"tmp-src/render-w.h"
			],
			[
				"render",
				"tmp-src/render-w.h"
			],
			[
				"ren",
				"src/render-w.h"
			],
			[
				"re",
				"src/render-w.h"
			],
			[
				"c",
				"pro-files/linux/config.pro"
			],
			[
				"rener",
				"src/render-w.h"
			],
			[
				"ma",
				"src/main.cpp"
			],
			[
				"ut",
				"utils.h"
			],
			[
				"pre",
				"pre.tex"
			],
			[
				"bea",
				"beamer.tex"
			],
			[
				"be",
				"beamer.tex"
			],
			[
				"f",
				"fft.cpp"
			],
			[
				"std",
				"stdinit.tex"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "qt",
		"selected_items":
		[
			[
				"qt",
				"~/pro/qt-render-kit/qt-render-kit.sublime-project"
			],
			[
				"",
				"~/pro/xmath/xmath.sublime-project"
			],
			[
				"lina",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Lineare Algebra und Analytische Geometrie/II/Aufzeichnungen/tex/lina2.sublime-project"
			],
			[
				"nv",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Seminar Numerische Verfahren/tex/nv-tex.sublime-project"
			],
			[
				"lina2",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Lineare Algebra und Analytische Geometrie/II/Übungen/Übung 01/tex/lina2-01.sublime-project"
			],
			[
				"latex",
				"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/latex-stdinit.sublime-project"
			],
			[
				"p",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/I/Spektroskopie der Sonne/p-so.sublime-project"
			],
			[
				"ff",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Proseminar Numerische Mathematik/presentation/fft.sublime-project"
			],
			[
				"histow",
				"/home/lyrahgames/cloud/Dropbox/pro/qt-project/histow-kde-v2/histow-kde-v2.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 195.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
