{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"vec",
				"vec2"
			],
			[
				"Vec",
				"VecField2f"
			],
			[
				"c",
				"count"
			],
			[
				"rand",
				"rand_pos_size"
			],
			[
				"init",
				"initRandPos"
			],
			[
				"ve",
				"vector"
			],
			[
				"rand_p",
				"rand_pos_size"
			],
			[
				"ran",
				"rand_pos"
			],
			[
				"Ra",
				"RAND_POINT_COUNT"
			],
			[
				"ra",
				"rand_num"
			],
			[
				"pri",
				"private"
			],
			[
				"ome",
				"omega2"
			],
			[
				"F_",
				"F_tmp3"
			],
			[
				"F",
				"F_tmp1"
			],
			[
				"inv",
				"inv_scale"
			],
			[
				"Re",
				"Re_inv"
			],
			[
				"Sc",
				"ScalarField2f"
			],
			[
				"S",
				"ScalarField2f"
			],
			[
				"sc",
				"scalar_field\t(render-w.h)"
			],
			[
				"end",
				"endif\t(render-w.h)"
			],
			[
				"off",
				"offset"
			],
			[
				"o",
				"offset"
			],
			[
				"vc",
				"vec2"
			],
			[
				"sca",
				"scalar-field"
			],
			[
				"pixe",
				"pixel_grid"
			],
			[
				"Sca",
				"ScalarField2f\t(scalar-field.h)"
			],
			[
				"max",
				"max_mag"
			],
			[
				"__",
				"__SCALAR_FIELD_H__"
			],
			[
				"Ve",
				"VecField2f"
			],
			[
				"vec2",
				"vec2u"
			],
			[
				"tm",
				"tmp_y2"
			],
			[
				"tmp",
				"tmp_x2"
			],
			[
				"tmp_y",
				"tmp_y1"
			],
			[
				"_",
				"_field"
			],
			[
				"gri",
				"grid_point"
			],
			[
				"grid",
				"grid_min"
			],
			[
				"pos",
				"pos_vec"
			],
			[
				"def",
				"def_grid"
			],
			[
				"com",
				"comp\t(vec.h)"
			],
			[
				"Grid",
				"Grid2"
			],
			[
				"max_",
				"max_val"
			],
			[
				"min",
				"min_val"
			],
			[
				"tem",
				"template\t(grid.h)"
			],
			[
				"lin",
				"lineTo"
			],
			[
				"size",
				"size_x"
			],
			[
				"pa",
				"path"
			],
			[
				"gi",
				"grid"
			],
			[
				"idx",
				"idx_y"
			],
			[
				"set",
				"setzero"
			],
			[
				"Gr",
				"Grid2"
			],
			[
				"te",
				"template\t(grid.h)"
			],
			[
				"Grd",
				"Grid2f\t(grid.h)"
			],
			[
				"mi",
				"min_x"
			],
			[
				"siz",
				"size_x"
			],
			[
				"co",
				"count_y"
			],
			[
				"cou",
				"count_y"
			],
			[
				"si",
				"size_y"
			],
			[
				"N_",
				"N_Y"
			],
			[
				"N",
				"N_Y"
			],
			[
				"sz",
				"size_x"
			],
			[
				"ot",
				"out"
			],
			[
				"bac",
				"back_shift"
			],
			[
				"bit",
				"bit_reverse"
			],
			[
				"tw",
				"twiddle_lut_power"
			],
			[
				"twi",
				"twiddle_lut_count"
			],
			[
				"eve",
				"even_out"
			],
			[
				"ui",
				"uint"
			],
			[
				"odd",
				"odd_in"
			],
			[
				"even",
				"even_in"
			],
			[
				"M_P",
				"M_PI"
			],
			[
				"struct",
				"struct\tstruct"
			],
			[
				"fft",
				"fft_data"
			]
		]
	},
	"buffers":
	[
		{
			"file": "tmp-src/main.cpp",
			"settings":
			{
				"buffer_size": 1765,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/nsg.h",
			"settings":
			{
				"buffer_size": 4696,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/utils.h",
			"settings":
			{
				"buffer_size": 134,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 2285,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/cfs.h",
			"settings":
			{
				"buffer_size": 4186,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/xmath/linmap.h",
			"settings":
			{
				"buffer_size": 837,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/grid.h",
			"settings":
			{
				"buffer_size": 2651,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/colmap.h",
			"settings":
			{
				"buffer_size": 2473,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/gui/main-w.h",
			"settings":
			{
				"buffer_size": 3407,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/render-w.h",
			"settings":
			{
				"buffer_size": 4364,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/util.h",
			"settings":
			{
				"buffer_size": 867,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/field.h",
			"settings":
			{
				"buffer_size": 1490,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/scalar-field.h",
			"settings":
			{
				"buffer_size": 2548,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/cfs.cpp",
			"settings":
			{
				"buffer_size": 11186,
				"line_ending": "Unix"
			}
		},
		{
			"file": "todo",
			"settings":
			{
				"buffer_size": 236,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"main-w.h\"\n\n\nMainW::MainW(CFS* in_cfs, QWidget *parent): QWidget(parent), ready(true), _cfs(in_cfs), rand_pos(nullptr), rand_pos_size(0){\n\tsetMouseTracking(true);\n\n\t// init rendering\n\trender_w = new RenderW(this);\n\n\ttimer = new QTimer(this);\n\tconnect(timer, SIGNAL(timeout()), this, SLOT(repaint()));\n\ttimer->start(_refresh_time_);\n\n\n\tctrl_w = new CtrlW(this);\n\tctrl_w->setFixedWidth(200);\n\n\n\tQHBoxLayout *layout = new QHBoxLayout(this);\n\tlayout->addWidget(render_w);\n\tlayout->addWidget(ctrl_w);\n\n\n\t_colormap.add_base({0.0f, {0.0f,0.5f,1.0f}});\n\t_colormap.add_base({1.0f, {1.0f,0.5f,0.0f}});\n\t_colormap.add_base({0.33f, {0.0f,1.0f,1.0f}});\n\t_colormap.add_base({0.66f, {1.0f,1.0f,0.0f}});\n\t_colormap.add_base({0.5f, {1,1,1}});\n\t_colormap.add_base({1.1f, {1,0,0}});\n\t_colormap.add_base({-0.1f, {0,0,1}});\n\n\n\tinit_rand_pos();\n\trand_pos_size = 100;\n}\n\nMainW::~MainW(){\n\tdelete[] rand_pos;\n}\n\nvoid MainW::repaint(){\n\t_cfs->compute_time_it();\n\n\tif (!ready)\n\t\treturn;\n\n\tupdate();\n}\n\nvoid MainW::init_rand_pos(){\n\tif (rand_pos != nullptr)\n\t\tdelete[] rand_pos;\n\n\trand_pos = new vec2[_rand_pos_size_max_];\n\n\tgen_rand_pos();\n}\n\nvoid MainW::gen_rand_pos(){\n\tfor (uint i = 0; i < _rand_pos_size_max_; i++){\n\t\trand_pos[i][0] = (float(rand())/float(RAND_MAX)) * _cfs->grid_map()[0].length() + _cfs->grid_map()[0].min();\n\t\trand_pos[i][1] = (float(rand())/float(RAND_MAX)) * _cfs->grid_map()[1].length() + _cfs->grid_map()[1].min();\n\t}\n}\n\nvoid MainW::set_rand_pos_size_slot(int i){\n\trand_pos_size = i;\n\tset_ready();\n}\n\nvoid MainW::gen_rand_pos_slot(){\n\tgen_rand_pos();\n\tset_ready();\n}\n\nMainW::RenderW::RenderW(MainW *parent): QWidget(parent), main_w(parent){\n\tpath_step = 0.05f;\n\n\tsetMouseTracking(true);\n}\n\nvoid MainW::RenderW::paintEvent(QPaintEvent *event){\n\tif (!ready())\n\t\treturn;\n\n\tQPainter painter(this);\n\tpainter.setRenderHints(QPainter::Antialiasing, true);\n\tQImage map(width(), height(), QImage::Format_ARGB32);\n\tmap.fill(Qt::black);\n\n\n\tconst int i_min = ceil( _pix_grid_map[0].cell_idx(cfs().grid_map()[0].node_pos(1)) );\n\tconst int i_max = floor( _pix_grid_map[0].cell_idx(cfs().grid_map()[0].node_pos(cfs().grid_map()[0].size()-1)) );\n\tconst int j_min = ceil( _pix_grid_map[1].cell_idx(cfs().grid_map()[1].node_pos(1)) );\n\tconst int j_max = floor( _pix_grid_map[1].cell_idx(cfs().grid_map()[1].node_pos(cfs().grid_map()[1].size()-1)) );\n\n\n\t// const int i_min = 0;\n\t// const int i_max = width()-1;\n\t// const int j_min = 0;\n\t// const int j_max = height()-1;\n\n\tfor (int i = i_min; i <= i_max; i++){\n\t\tfor (int j = j_min; j <= j_max; j++){\n\t\t\tconst float x = _pix_grid_map[0].cell_pos(i);\n\t\t\tconst float y = _pix_grid_map[1].cell_pos(height() - j - 1);\n\n\t\t\tconst color_rgbf tmp = 255.0f * color_map()(cfs().p_save(x,y));\n\t\t\tconst QRgb col = qRgb(tmp[0],tmp[1],tmp[2]);\n\t\t\tmap.setPixel(i,j,col);\n\t\t}\n\t}\n\n\tconst QRect rect = QRect(0, 0, width(), height());\n\tpainter.drawImage(rect, map, rect);\n\n\n\tfor (int i = 0; i < main_w->rand_pos_size; i++){\n\t\t// float pos_x = _pix_grid_map[0].cell_pos(mouse_x);\n\t\t// float pos_y = _pix_grid_map[1].cell_pos(height()-mouse_y);\n\t\t// QPainterPath path(QPointF(mouse_x, mouse_y));\n\t\tfloat pos_x = main_w->rand_pos[i][0];\n\t\tfloat pos_y = main_w->rand_pos[i][1];\n\t\tconst float idxx = _pix_grid_map[0].cell_idx(pos_x);\n\t\tconst float idxy = _pix_grid_map[1].cell_idx(pos_y);\n\t\tQPainterPath path(QPointF(idxx,height()-idxy));\n\n\t\tfor (int t = 0; t < 1000; t++){\n\t\t\tconst float tmp_pos_x = pos_x + path_step * cfs().vx(pos_x, pos_y);\n\t\t\tconst float tmp_pos_y = pos_y + path_step * cfs().vy(pos_x, pos_y);\n\t\t\n\t\t\tif (cfs().pos_out_vx_bound(tmp_pos_x, tmp_pos_y) || cfs().pos_out_vy_bound(tmp_pos_x, tmp_pos_y))\n\t\t\t\tbreak;\n\n\t\t\tpos_x = tmp_pos_x;\n\t\t\tpos_y = tmp_pos_y;\n\n\t\t\tconst float idxx = _pix_grid_map[0].cell_idx(pos_x);\n\t\t\tconst float idxy = _pix_grid_map[1].cell_idx(pos_y);\n\n\t\t\tpath.lineTo(idxx, height()-idxy);\n\t\t}\n\n\t\tpainter.setBrush(Qt::NoBrush);\n\t\tpainter.drawPath(path);\n\t}\n\n\n\n\tpainter.end();\n\n\tready() = false;\n}\n\nvoid MainW::RenderW::resizeEvent(QResizeEvent *event){\n\t_pix_grid_map[0].set_cell_count(width());\n\t_pix_grid_map[1].set_cell_count(height());\n\n\tconst float grid_ar = cfs().grid_map()[0].length() / cfs().grid_map()[1].length();\t\t\t\n\tconst float ar = float(width())/float(height());\n\t// const double ar = double(event->size().width())/double(event->size().height());\n\n\tif (grid_ar/ar <= 1.0f){\n\t\t_pix_grid_map[1].set_intvl(cfs().grid_map()[1].min(), cfs().grid_map()[1].max());\n\t\tconst float l = cfs().grid_map()[1].max() - cfs().grid_map()[1].min();\n\t\tconst float mid = 0.5f * (cfs().grid_map()[0].min() + cfs().grid_map()[0].max());\n\n\t\t_pix_grid_map[0].set_intvl(mid - 0.5f*ar*l, mid + 0.5f*ar*l);\n\t}else{\n\t\tconst float ar = float(height())/float(width());\n\t\t_pix_grid_map[0].set_intvl(cfs().grid_map()[0].min(), cfs().grid_map()[0].max());\n\t\tconst float l = cfs().grid_map()[0].max() - cfs().grid_map()[0].min();\n\t\tconst float mid = 0.5f * (cfs().grid_map()[1].min() + cfs().grid_map()[1].max());\n\n\t\t_pix_grid_map[1].set_intvl(mid - 0.5f*ar*l, mid + 0.5f*ar*l);\n\t}\n\n\tready() = true;\n}\n\nMainW::CtrlW::CtrlW(MainW *parent): QWidget(parent), main_w(parent){\n\tmain_gb = new QGroupBox(\"controls:\", this);\n\tmain_gb->setFixedWidth(200);\n\t// main_gb->setFlat(false);\n\n\tQVBoxLayout *main_gb_layout = new QVBoxLayout(main_gb);\n\n\tgrid_sb = new QSpinBox(this);\n\tgrid_sb->setMinimum(3);\n\tgrid_sb->setMaximum(10000);\n\tgrid_sb->setValue(100);\n\tmain_gb_layout->addWidget(grid_sb);\n\tconnect(grid_sb, SIGNAL(valueChanged(int)), main_w, SLOT(set_grid(int)));\n\n\n\trender_gb = new QGroupBox(\"render:\", this);\n\tQVBoxLayout *render_gb_layout = new QVBoxLayout(render_gb);\n\n\trand_pos_size_sb = new QSpinBox(this);\n\trand_pos_size_sb->setMinimum(0);\n\trand_pos_size_sb->setMaximum(MainW::_rand_pos_size_max_);\n\trand_pos_size_sb->setValue(main_w->rand_pos_size);\n\trender_gb_layout->addWidget(rand_pos_size_sb);\n\tconnect(rand_pos_size_sb, SIGNAL(valueChanged(int)), main_w, SLOT(set_rand_pos_size_slot(int)));\n\n\tgen_rand_pos_pb = new QPushButton(\"gen rand pos\", this);\n\trender_gb_layout->addWidget(gen_rand_pos_pb);\n\tconnect(gen_rand_pos_pb, SIGNAL(clicked()), main_w, SLOT(gen_rand_pos_slot()));\n\n\trender_gb->adjustSize();\n\tmain_gb_layout->addWidget(render_gb);\n\t\n\n\tmain_gb->adjustSize();\n}",
			"file": "src/main-w.cpp",
			"file_size": 6212,
			"file_write_time": 131239001198471787,
			"settings":
			{
				"buffer_size": 6212,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef __GRID_H__\n#define __GRID_H__\n\n#include <util.h>\n\n// one dimensional regular grid map\n\ntemplate <class T, class N>\nstruct GridMap{\n\t// types used for definition of template\n\tusing real_type = T;\n\tusing size_type = N;\n\n\n\tpublic:\n\t\tGridMap(): _min(0), _max(1), _size(1), _step(1), _inv_step(1){}\n\t\tGridMap(T in_min, T in_max, N in_cell_count): GridMap(){\n\t\t\tset_intvl(in_min, in_max);\n\t\t\tset_cell_count(in_cell_count);\n\t\t}\n\n\n\t\t// minimum of interval\n\t\tT min() const{return _min;}\n\t\t// maximum of interval\n\t\tT max() const{return _max;}\n\t\t//\n\t\tT length() const{return _max - _min;}\n\t\t// size of the GridMap = cell count\n\t\tN size() const{return _size;}\n\t\t// get cell count\n\t\tN cell_count() const{return size();}\n\t\t// get node count\n\t\tN node_count() const{return size()+1;}\n\t\t// get step (distance between two nodes)\n\t\tT step() const{return _step;}\n\t\t// inverse of step\n\t\tT inv_step() const{return _inv_step;}\n\n\t\t// get position to given node (overloaded to avoid casting)\n\t\t// T node_pos(N idx) const{return min() + step()*static_cast<T>(idx);}\n\t\tT node_pos(T idx) const{return min() + step()*idx;}\n\t\t// get position to given cell (overloaded to avoid casting)\n\t\t// T cell_pos(N idx) const{return node_pos(idx) + 0.5*step;}\n\t\tT cell_pos(T idx) const{return node_pos(idx) + 0.5*step();}\n\n\t\t// get exact node index for given point (no rounding or casting)\n\t\tT node_idx(T in_pos) const{return (in_pos - min()) * inv_step();}\n\t\t// get cell index\n\t\tT cell_idx(T in_pos) const{return node_idx(in_pos) - 0.5;}\n\n\n\t\t// set size/cell count of GridMap\n\t\tvoid set_size(N in_size);\n\t\t// set cell count\t\n\t\tvoid set_cell_count(N in_count){set_size(in_count);}\n\t\t// set node count of GridMap\n\t\tvoid set_node_count(N in_node_count){set_size(in_node_count - 1);}\n\t\t// set interval for transformation\n\t\tvoid set_intvl(T in_min, T in_max);\n\n\n\tprivate:\n\t\t// precompute step values\n\t\tvoid compute_step();\n\n\n\t\tstruct Node{\n\t\t\tT operator[](T idx){}\n\t\t};\n\n\n\tprivate:\n\t\t// intelval parameter\n\t\tT _min, _max;\n\t\t// size/cell count\n\t\tN _size;\n\t\t// temporary step values for transformation\n\t\tT _step, _inv_step;\n};\n\n\ntemplate <class T, class N>\ninline void GridMap<T,N>::set_size(N in_size){\n\tif (in_size <= 0)\n\t\treturn;\n\n\t_size = in_size;\n\tcompute_step();\n}\n\ntemplate <class T, class N>\ninline void GridMap<T,N>::set_intvl(T in_min, T in_max){\n\tif (in_min >= in_max)\n\t\treturn;\n\n\t_min = in_min;\n\t_max = in_max;\n\tcompute_step();\n}\n\ntemplate <class T, class N>\ninline void GridMap<T,N>::compute_step(){\n\t_step = (_max - _min) / static_cast<T>(_size);\n\t_inv_step = static_cast<T>(_size) / (_max - _min);\n}\n\n\nusing gridmap = GridMap<float,uint>;\n\n\n#endif // __GRID_H__",
			"file": "src/grid.h",
			"file_size": 2637,
			"file_write_time": 131239001198471787,
			"settings":
			{
				"buffer_size": 2637,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef __VEC_H__\n#define __VEC_H__\n\n\n\n\nnamespace xmath{\n\n\ntemplate <class T, std::size_t N>\nstruct vec{\n\tusing type = T;\n\tstatic constexpr std::size_t _size_ = N;\n\n\n\tpublic:\n\t\tstatic constexpr std::size_t size(){return N;}\n\n\t\tT& operator [](std::size_t idx){return v[idx];}\n\t\tconstexpr const T& operator [](std::size_t idx) const{return v[idx];}\n\t\n\n\tpublic:\n\t\tT v[N];\n};\n\ntemplate <std::size_t N>\nusing vecf = vec<float,N>;\nusing vecf2 = vec<float,2>;\n\n\ntemplate <class T, std::size_t N>\ninline constexpr vec<T,N> operator+(const vec<T,N>& v1, const vec<T,N>& v2){\n\tvec<T,N> tmp{};\n\tfor (uint i = 0; i < N; i++){\n\t\ttmp[i] = v1[i] + v2[i];\n\t}\n\treturn tmp;\n}\n\ntemplate <class T, std::size_t N>\ninline constexpr vec<T,N> operator*(const vec<T,N>& v1, const vec<T,N>& v2){\n\tvec<T,N> tmp{};\n\tfor (uint i = 0; i < N; i++){\n\t\ttmp[i] = v1[i] * v2[i];\n\t}\n\treturn tmp;\n}\n\ntemplate <class T, std::size_t N>\ninline constexpr vec<T,N> operator*(T s, const vec<T,N>& v){\n\tvec<T,N> tmp{};\n\tfor (uint i = 0; i < N; i++){\n\t\ttmp[i] = s * v[i];\n\t}\n\treturn tmp;\n}\n\n\n} // xmath\n\n\n#endif // __VEC_H__",
			"file": "src/vec.h",
			"file_size": 1079,
			"file_write_time": 131237860030941177,
			"settings":
			{
				"buffer_size": 1079,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/vec-field.h",
			"settings":
			{
				"buffer_size": 2854,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pro-files/linux/config.pro",
			"settings":
			{
				"buffer_size": 516,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "TARGET  = static\n\nTEMPLATE = app\nCONFIG += qt thread warn_on release \nQT = core gui\n\ngreaterThan(QT_MAJOR_VERSION, 4) {\n    QT += widgets\n}\n\nDEFINES += \nQMAKE_CXXFLAGS  += -O2 -fPIC -restrict -fno-fnalias -fno-rtti -fno-exceptions -static -std=c++11\nQMAKE_LFLAGS    +=\n\nINCLUDEPATH += \n\nLIBS +=\n\nHEADERS = \\\n\t../../src/render-w.h \\\n\t../../src/vec.h \\\n\t../../src/grid.h \\\n\t../../src/vec-field.h \\\n\t../../src/scalar-field.h \\\n\t../../src/nsg.h \\\n\t../../src/utils.h\n\nSOURCES = ../../src/main.cpp\n\n\nunix:OBJECTS_DIR          = obj\nunix:MOC_DIR              = moc\n\nunix:QMAKE_POST_LINK=strip $(TARGET)\n",
			"file": "pro-files/linux/config-static.pro",
			"file_size": 596,
			"file_write_time": 131233438955638278,
			"settings":
			{
				"buffer_size": 596,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/cfs.cpp",
			"settings":
			{
				"buffer_size": 11186,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/xmath/intvl.h",
			"settings":
			{
				"buffer_size": 280,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/xmath/vec.h",
			"settings":
			{
				"buffer_size": 4857,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/gui/main-w.cpp",
			"settings":
			{
				"buffer_size": 11727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/io/term-out.h",
			"settings":
			{
				"buffer_size": 806,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef __LINMAP_H__\n#define __LINMAP_H__\n\n#include <xmath/intvl.h>\n\n\nnamespace xmath{\n\n\ntemplate <class T>\nstruct intvl{\n\tunion{\n\t\tstruct{T min, max;};\n\t\tstruct{T inf, sup;};\n\t};\n};\n\nusing intvlf = intvl<float>;\n\n\ntemplate <class T>\ninline constexpr T len(const intvl<T>& i){\n\treturn i.max - i.min;\n}\n\n\n\ntemplate <class T>\nstruct linmap{\n\tusing type = T;\n\n\n\tstatic constexpr T map(const intvl<T>& domain, const intvl<T>& range, T input){\n\t\treturn (range.min * (domain.max - input) + range.max * (input - domain.min)) / (domain.max - domain.min);\n\t}\n\n\n\tpublic:\n\t\tconstexpr linmap(const intvl<T>& domain = {T{0}, T{1}}, const intvl<T>& range = {T{0}, T{1}}):\n\t\td(domain), r(range),\n\t\tu{r.max/len(d)}, v{r.min/len(d)},\n\t\ts{len(r)/len(d)}, // should be numerical more stable than (v-u)\n\t\ti{r.min - s*d.min} // maybe use: (d.max*r.min - d.min*r.max) / len(d)\n\t\t{} // compiler should save the inverse of len(d) in a temporary variable\n\n\n\t\tconstexpr T operator()(T input) const{return v * (d.max - input) + u * (input - d.min);}\n\n\t\tconstexpr intvl<T> domain() const{return d;}\n\t\tconstexpr intvl<T> range() const{return r;}\n\t\tconstexpr T slope() const{return s;}\n\t\tconstexpr T intercept() const{return i;}\n\t\tconstexpr T coeff_min() const{return v;}\n\t\tconstexpr T coeff_max() const{return u;}\n\n\n\tprivate:\n\t\tintvl<T> d; // domain\n\t\tintvl<T> r; // range\n\t\tT s; // slope\n\t\tT i; // intercept\n\t\tT u, v; // coefficients for fast interpolation\n};\n\nusing linmapf = linmap<float>;\n\n\ntemplate <class T>\ninline constexpr linmap<T> inv(const linmap<T>& lm){return linmap<T>(lm.range(), lm.domain());}\n\n\n} // xmath\n\n\n#endif // __LINMAP_H__",
			"file": "src/linmap.h",
			"file_size": 1618,
			"file_write_time": 131237850944330699,
			"settings":
			{
				"buffer_size": 1618,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef __MAIN_W_H__\n#define __MAIN_W_H__\n\n#include <iostream>\n#include <vector>\n// #include <stdlib.h>\n\n#include <QTimer>\n#include <QWidget>\n#include <QHBoxLayout>\n#include <QVBoxLayout>\n#include <QGroupBox>\n#include <QSpinBox>\n#include <QPainter>\n#include <QKeyEvent>\n#include <QMouseEvent>\n#include <QPushButton>\n\n#include <grid.h>\n#include <cfs.h>\n#include <colmap.h>\n\n\nclass MainW : public QWidget{\n\tQ_OBJECT\n\n\n\tstatic constexpr uint _fps_ = 60;\n\tstatic constexpr uint _refresh_time_ = 1000 / _fps_;\n\tstatic constexpr uint _rand_pos_size_max_ = 1 << 15;\n\t\n\n\tpublic:\n\t\tMainW(CFS* in_cfs = nullptr, QWidget *parent = nullptr);\n\t\t~MainW();\n\n\n\tpublic slots:\n\t\tvoid repaint();\n\t\tvoid set_ready(bool in = true){ready = true;}\n\n\t\tvoid init_rand_pos();\n\t\tvoid gen_rand_pos();\n\n\n\tpublic:\n\t\tclass RenderW : public QWidget{\n\t\t\tpublic:\n\t\t\t\tRenderW(MainW *parent = nullptr);\n\n\t\t\t\tconst CFS& cfs() const{return *(main_w->_cfs);}\n\t\t\t\tconst colormap& color_map() const{return main_w->_colormap;}\n\n\n\t\t\tprotected:\n\t\t\t\tvoid paintEvent(QPaintEvent *event);\n\t\t\t\tvoid resizeEvent(QResizeEvent *event);\n\t\t\t\tvoid mouseMoveEvent(QMouseEvent *event){mouse_x = event->x(); mouse_y = event->y();ready() = true;event->ignore();}\n\n\t\t\tprivate:\n\t\t\t\tconst bool& ready() const{return main_w->ready;}\n\t\t\t\tbool& ready(){return main_w->ready;}\n\n\n\t\t\tprivate:\n\t\t\t\tMainW *main_w;\n\n\t\t\t\tgridmap _pix_grid_map[2];\n\t\t\t\tfloat path_step;\n\n\t\t\t\tint mouse_x, mouse_y;\n\t\t};\n\n\n\t\tclass CtrlW : public QWidget{\n\t\t\tpublic:\n\t\t\t\tCtrlW(MainW* parent = nullptr);\n\n\t\t\tprivate:\n\t\t\t\tMainW *main_w;\n\n\t\t\t\tQGroupBox *main_gb, *render_gb;\n\t\t\t\tQSpinBox *grid_sb;\n\n\t\t\t\tQSpinBox *rand_pos_size_sb;\n\t\t\t\tQPushButton *gen_rand_pos_pb;\n\t\t};\n\n\n\tprotected:\n\t\tvoid mouseMoveEvent(QMouseEvent *event){mouse_x = event->x(); mouse_y = event->y();}\n\t\tvoid resizeEvent(QResizeEvent *event){set_ready();}\n\n\n\tprivate:\n\t\tRenderW *render_w;\n\t\tCtrlW *ctrl_w;\n\n\t\tbool ready;\n\t\tQTimer *timer;\n\n\t\tint mouse_x, mouse_y;\n\n\n\tprivate:\n\t\tCFS *_cfs;\n\t\tcolormap _colormap;\n\n\t\tvec2 *rand_pos;\n\t\tuint rand_pos_size;\n\n\n\tprivate slots:\n\t\tvoid set_grid(int n){\n\t\t\t// *_cfs = CFS{gridmap(0.0f, 2.0f, n), gridmap(0.0f, 1.0f, n)};\n\t\t\tset_ready();\n\t\t}\n\n\t\tvoid set_rand_pos_size_slot(int i);\n\t\tvoid gen_rand_pos_slot();\n};\n\n\n#endif // __MAIN_W_H__",
			"file": "src/main-w.h",
			"file_size": 2247,
			"file_write_time": 131239001198471787,
			"settings":
			{
				"buffer_size": 2247,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tmp-src/vec.h",
			"settings":
			{
				"buffer_size": 5041,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "pus",
		"selected_items":
		[
			[
				"pus",
				"Git: Push"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"git quc",
				"Git: Quick Add"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"qu",
				"Git: Quick Add"
			],
			[
				"commi",
				"Git: Commit"
			],
			[
				"qui",
				"Git: Quick Add"
			],
			[
				"quic",
				"Git: Quick Add"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"quick",
				"Git: Quick Add"
			],
			[
				"ssc++",
				"Set Syntax: C++"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"clse",
				"Project: Close"
			],
			[
				"close",
				"Project: Close"
			],
			[
				"langua",
				"Dictionaries: Set Language"
			],
			[
				"save",
				"Project: Save As"
			],
			[
				"add",
				"Project: Add Folder"
			],
			[
				"tmpf",
				"LaTexTools: Delete temporary files"
			],
			[
				"tmpfi",
				"LaTexTools: Delete temporary files"
			],
			[
				"tmpfil",
				"LaTexTools: Delete temporary files"
			],
			[
				"clo",
				"Project: Close"
			],
			[
				"kebinf",
				"Preferences: Key Bindings - Default"
			],
			[
				"tab",
				"View: Toggle Tabs"
			],
			[
				"tabs",
				"View: Toggle Tabs"
			],
			[
				"statur",
				"View: Toggle Status Bar"
			],
			[
				"mini",
				"View: Toggle Minimap"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"clos",
				"Project: Close"
			],
			[
				"brw",
				"Preferences: Browse Packages"
			],
			[
				"settings",
				"Preferences: Settings - Default"
			],
			[
				"add f",
				"Project: Add Folder"
			],
			[
				"lis",
				"Package Control: List Packages"
			]
		],
		"width": 601.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/lyrahgames/pro/fluid-sim",
		"/home/lyrahgames/pro/fluid-sim/src",
		"/home/lyrahgames/pro/fluid-sim/src/gui",
		"/home/lyrahgames/pro/fluid-sim/src/io",
		"/home/lyrahgames/pro/fluid-sim/src/xmath",
		"/home/lyrahgames/pro/fluid-sim/tmp",
		"/home/lyrahgames/pro/fluid-sim/tmp-src"
	],
	"file_history":
	[
		"/home/lyrahgames/.bashrc",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.h.backup",
		"/home/lyrahgames/pro/fluid-sim/src/main-w.h",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.cpp",
		"/home/lyrahgames/pro/fluid-sim/todo",
		"/home/lyrahgames/pro/qt-render-kit/src/gui/main-w.cpp",
		"/home/lyrahgames/pro/fluid-sim/src/vec.h",
		"/home/lyrahgames/pro/fluid-sim/src/linmap.h",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.h",
		"/home/lyrahgames/pro/fluid-sim/src/cfs.backup",
		"/home/lyrahgames/pro/fluid-sim/src/field.h",
		"/home/lyrahgames/pro/fluid-sim/src/render-w.h",
		"/home/lyrahgames/bashrc",
		"/home/lyrahgames/pro/qt-render-kit/src/gui/main-w.h",
		"/home/lyrahgames/pro/fluid-sim/pro-files/linux/config-periodic.pro",
		"/home/mens/.bashrc",
		"/home/mens/.bash",
		"/home/lyrahgames/pro/fluid-sim/src/vec-field.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/nsg-code.sublime-project",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/utils.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/src/scalar-field.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/src/field.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/II/NSG/code/render-w.h",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Proseminar Numerische Mathematik/presentation/doc.tex",
		"/tmp/mozilla_lyrahgames0/bow.tex",
		"/tmp/mozilla_lyrahgames0/game0.tex",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/hilbert.tex",
		"/home/lyrahgames/.config/sublime-text-2/Packages/User/LaTeXTools.sublime-settings",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main.cpp",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/II/317 - Elektrischer Schwingkreis/erzw-schw.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/II/406 - Gitter und Prismenspektrometer/dispersion.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/III/412 - Spezifische Drehung von Zucker/d-phi.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/III/120 - Gekoppelte Schwingungen/frequenzen.gnuplot-config",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Grundpraktikum Experimentalphysik/III/120 - Gekoppelte Schwingungen/frequenzen.gnuplot-data",
		"/home/lyrahgames/cloud/Dropbox/tools/sublime-text/sublime-text-2.0.2/User/LaTeX/snippets/stdinit.sublime-snippet",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main (lyrahgames-lap's conflicted copy 2015-12-09).log",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main (lyrahgames-lap's conflicted copy 2015-12-09).aux",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/stdinit.tex",
		"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/main.tex",
		"/home/lyrahgames/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/lyrahgames/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/lyrahgames/cloud/Dropbox/usr/uni/Höhere Analysis/I/Übungen/Übung 01/SoSe2015_HABlatt1.tex",
		"/home/lyrahgames/cloud/Dropbox/pro/qt-project/histoW-v3/src/histo-w.h",
		"/home/lyrahgames/pro/latex-stdinit/sublime-text-snippets/subsection_s.sublime-snippet",
		"/home/lyrahgames/pro/latex-stdinit/table.csv",
		"/home/lyrahgames/pro/latex-stdinit/sublime-text-snippets/stdinit.sublime-snippet",
		"/home/lyrahgames/pro/latex-stdinit/test.py",
		"/home/lyrahgames/pro/latex-stdinit/main.cu",
		"/home/lyrahgames/pro/latex-stdinit/main.cpp",
		"/home/lyrahgames/pro/latex-stdinit/sublime-text-snippets/math/qed01.sublime-snippet",
		"/home/lyrahgames/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/lyrahgames/cloud/Dropbox/pro/qt-project/histoW-v3/src/main.cpp"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"clear_pb",
			"wave_c",
			"wave_c_l",
			"wave_gb",
			"main_gb_layout",
			"005f",
			"0",
			"j",
			"f",
			"=",
			"= ",
			"constexpr",
			"uint",
			"inline",
			"length",
			"T",
			"_field",
			"_v",
			"grid_sb",
			"rand",
			"vx",
			"pos.x",
			"tmp",
			"RHS",
			"vz_",
			"vx_",
			"vy_",
			"[2]",
			"[0]",
			"[1]",
			"vx_",
			"0]",
			"[0]",
			"vx",
			"painter",
			"render_w",
			"mouse",
			"0",
			"_p",
			"main_gp",
			"main_w",
			"){",
			"_cfs",
			"__RENDER_W_H__",
			"render",
			"parent",
			"()));",
			"float",
			"height",
			"width",
			"size",
			"constexpr",
			"x",
			"tmp_idx",
			"size",
			"cfs",
			"_grid",
			"grid_map",
			"cidx",
			"refr",
			"fps",
			"unsigned int",
			"_time_safe",
			"gr",
			"grid",
			"__VEC_H__",
			"__VEC_H_",
			"vec",
			"cdiv",
			"5",
			"6",
			"9",
			"7",
			"9",
			"6",
			"7",
			"6",
			"7",
			"6",
			"5",
			"7",
			"6",
			"5",
			"9",
			"len",
			"rand_pos_size",
			"7",
			"6",
			"9",
			"5",
			"v",
			"7",
			"5",
			"7",
			"8",
			"7",
			"5",
			"7",
			"5",
			"60",
			"7",
			"6",
			"10",
			"grid",
			"i",
			"F_tmp1",
			"max_mag",
			"VecField2",
			"min",
			"scale",
			"tmp",
			"unsigned",
			"v",
			"def_grid",
			"len",
			"d",
			"pos",
			"path2",
			"floor",
			"vec2",
			"vec1",
			"vec2.",
			"vec1.",
			"&vec2",
			"vec2",
			"vec2(",
			"size",
			"comp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\\t"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "tmp-src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1765,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tmp-src/nsg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4696,
						"regions":
						{
						},
						"selection":
						[
							[
								1398,
								1398
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tmp-src/utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 134,
						"regions":
						{
						},
						"selection":
						[
							[
								19,
								19
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2285,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2230,
										2231
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										129,
										130
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 67.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/cfs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4186,
						"regions":
						{
						},
						"selection":
						[
							[
								3423,
								3423
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4162,
										4163
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										67,
										68
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1239.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/xmath/linmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 837,
						"regions":
						{
						},
						"selection":
						[
							[
								665,
								665
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										802,
										803
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										85,
										86
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "tmp-src/grid.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2651,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 472.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/colmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2473,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/gui/main-w.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3407,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3116,
										3117
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										474,
										475
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1560.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "tmp-src/render-w.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4364,
						"regions":
						{
						},
						"selection":
						[
							[
								2039,
								2039
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3371,
										3372
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1337,
										1338
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/util.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 867,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										847,
										853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/field.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1490,
						"regions":
						{
						},
						"selection":
						[
							[
								257,
								257
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 37.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "tmp-src/scalar-field.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2548,
						"regions":
						{
						},
						"selection":
						[
							[
								595,
								595
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/cfs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11186,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 279.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "todo",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 236,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/main-w.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6212,
						"regions":
						{
						},
						"selection":
						[
							[
								399,
								399
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/util.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 867,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/grid.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2637,
						"regions":
						{
						},
						"selection":
						[
							[
								974,
								974
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/vec.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1079,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "tmp-src/vec-field.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2854,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "pro-files/linux/config.pro",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 516,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"history_list_is_closing": true,
							"rulers":
							[
							],
							"syntax": "Packages/QMakeProject/QMakeProject.tmLanguage",
							"tab_size": 4,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "pro-files/linux/config-static.pro",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 596,
						"regions":
						{
						},
						"selection":
						[
							[
								16,
								16
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/QMakeProject/QMakeProject.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				}
			]
		},
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 21,
					"file": "src/cfs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11186,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1615.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/cfs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4186,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/grid.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2637,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/main-w.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6212,
						"regions":
						{
						},
						"selection":
						[
							[
								946,
								946
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1717.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2285,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/xmath/intvl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 280,
						"regions":
						{
						},
						"selection":
						[
							[
								280,
								280
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "pro-files/linux/config.pro",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 516,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"history_list_is_closing": true,
							"rulers":
							[
							],
							"syntax": "Packages/QMakeProject/QMakeProject.tmLanguage",
							"tab_size": 4,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/xmath/vec.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4857,
						"regions":
						{
						},
						"selection":
						[
							[
								3041,
								3041
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3127,
										3128
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3006,
										3007
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1995.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/gui/main-w.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11727,
						"regions":
						{
						},
						"selection":
						[
							[
								784,
								784
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										819,
										820
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										771,
										772
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/io/term-out.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 806,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										782,
										788
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/xmath/linmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 837,
						"regions":
						{
						},
						"selection":
						[
							[
								798,
								798
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/colmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2473,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "tmp-src/render-w.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4364,
						"regions":
						{
						},
						"selection":
						[
							[
								4364,
								4364
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 980.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "tmp-src/grid.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2651,
						"regions":
						{
						},
						"selection":
						[
							[
								2432,
								2432
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"spell_check": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tmp-src/nsg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4696,
						"regions":
						{
						},
						"selection":
						[
							[
								3417,
								3417
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2010.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/field.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1490,
						"regions":
						{
						},
						"selection":
						[
							[
								1032,
								1032
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/gui/main-w.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3407,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 598.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/util.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 867,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										847,
										853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/linmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1618,
						"regions":
						{
						},
						"selection":
						[
							[
								121,
								121
							]
						],
						"settings":
						{
							"_anf_new": "",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 157.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "tmp-src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1765,
						"regions":
						{
						},
						"selection":
						[
							[
								813,
								813
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "src/main-w.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2225,
										2231
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 273.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "tmp-src/vec.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5041,
						"regions":
						{
						},
						"selection":
						[
							[
								3000,
								3000
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3043,
										3044
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3000,
										3001
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 780.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "tmp-src/scalar-field.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2548,
						"regions":
						{
						},
						"selection":
						[
							[
								998,
								998
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"_anf_new": "",
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-commit":
	{
		"height": 98.0
	},
	"output.git-pull":
	{
		"height": 98.0
	},
	"output.git-push":
	{
		"height": 142.0
	},
	"pinned_build_system": "",
	"project": "fluid-sim.sublime-project",
	"replace":
	{
		"height": 38.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"src/xmath/vec.h"
			],
			[
				"mainw",
				"src/gui/main-w.cpp"
			],
			[
				"cfs",
				"src/cfs.cpp"
			],
			[
				"main",
				"src/main.cpp"
			],
			[
				"cf",
				"src/cfs.h"
			],
			[
				"man",
				"src/main.cpp"
			],
			[
				"vec",
				"src/xmath/vec.h"
			],
			[
				"fiel",
				"src/field.h"
			],
			[
				"field",
				"src/field.h"
			],
			[
				"uti",
				"src/util.h"
			],
			[
				"fie",
				"src/field.h"
			],
			[
				"lin",
				"src/xmath/linmap.h"
			],
			[
				"col",
				"src/colmap.h"
			],
			[
				"con",
				"pro-files/linux/config.pro"
			],
			[
				"mai",
				"src/main.cpp"
			],
			[
				"ve",
				"src/vec.h"
			],
			[
				"li",
				"src/linmap.h"
			],
			[
				"rend",
				"tmp-src/render-w.h"
			],
			[
				"gri",
				"src/grid.h"
			],
			[
				"sca",
				"tmp-src/scalar-field.h"
			],
			[
				"co",
				"pro-files/linux/config.pro"
			],
			[
				"l",
				"src/linmap.h"
			],
			[
				"grid",
				"tmp-src/grid.h"
			],
			[
				"gr",
				"src/grid.h"
			],
			[
				"sc",
				"tmp-src/scalar-field.h"
			],
			[
				"mainwc",
				"src/main-w.cpp"
			],
			[
				"ns",
				"tmp-src/nsg.h"
			],
			[
				"nsg",
				"tmp-src/nsg.h"
			],
			[
				"mainwh",
				"src/main-w.h"
			],
			[
				"to",
				"todo"
			],
			[
				"tod",
				"todo"
			],
			[
				"rened",
				"tmp-src/render-w.h"
			],
			[
				"render",
				"tmp-src/render-w.h"
			],
			[
				"ren",
				"src/render-w.h"
			],
			[
				"re",
				"src/render-w.h"
			],
			[
				"u",
				"src/util.h"
			],
			[
				"c",
				"pro-files/linux/config.pro"
			],
			[
				"rener",
				"src/render-w.h"
			],
			[
				"ma",
				"src/main.cpp"
			],
			[
				"ut",
				"utils.h"
			],
			[
				"pre",
				"pre.tex"
			],
			[
				"bea",
				"beamer.tex"
			],
			[
				"be",
				"beamer.tex"
			],
			[
				"f",
				"fft.cpp"
			],
			[
				"std",
				"stdinit.tex"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/pro/xmath/xmath.sublime-project"
			],
			[
				"lina",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Lineare Algebra und Analytische Geometrie/II/Aufzeichnungen/tex/lina2.sublime-project"
			],
			[
				"nv",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Seminar Numerische Verfahren/tex/nv-tex.sublime-project"
			],
			[
				"lina2",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Lineare Algebra und Analytische Geometrie/II/Übungen/Übung 01/tex/lina2-01.sublime-project"
			],
			[
				"latex",
				"/home/lyrahgames/cloud/Dropbox/pro/latex-stdinit/latex-stdinit.sublime-project"
			],
			[
				"p",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Fortgeschrittenenpraktikum Physik/I/Spektroskopie der Sonne/p-so.sublime-project"
			],
			[
				"ff",
				"/home/lyrahgames/cloud/Dropbox/usr/uni/Proseminar Numerische Mathematik/presentation/fft.sublime-project"
			],
			[
				"histow",
				"/home/lyrahgames/cloud/Dropbox/pro/qt-project/histow-kde-v2/histow-kde-v2.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 195.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
